{"version":3,"sources":["components/Header.js","components/Footer.js","components/Note.js","components/CreateArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","Footer","currentYear","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","CreateArea","useState","note","setNote","handleChange","e","target","name","value","prevState","placeholder","onChange","rows","event","onAdd","preventDefault","App","notes","setNotes","deleteNote","filter","noteItem","index","newNote","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAUeA,MARf,WACI,OACI,gCACI,wCCUGC,MAbf,WAEI,IAAMC,GAAc,IAAIC,MAAOC,cAE/B,OACI,gCACI,wCACeF,KCQZG,MAff,SAAcC,GAMV,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BAAQC,QARhB,WACIJ,EAAMK,SAASL,EAAMM,MAOjB,Y,cC4BGC,MAtCf,SAAoBP,GAAQ,IAAD,EAEAQ,mBAAS,CAC5BN,MAAM,GACNC,QAAQ,KAJW,mBAEhBM,EAFgB,KAEXC,EAFW,KAOvB,SAASC,EAAaC,GAAI,IAAD,EACAA,EAAEC,OAAhBC,EADc,EACdA,KAAKC,EADS,EACTA,MAEZL,GAAQ,SAAAM,GACJ,OAAO,2BACAA,GADP,kBAEKF,EAAQC,OAcrB,OACI,6BACI,8BACI,2BAAOD,KAAK,QAAQG,YAAY,QAAQF,MAAON,EAAKP,MAAOgB,SAAUP,IACrE,8BAAUG,KAAK,UAAUG,YAAY,iBAAiBE,KAAK,IAAIJ,MAAON,EAAKN,QAASe,SAAUP,IAC9F,4BAAQP,QAdpB,SAAoBgB,GAChBpB,EAAMqB,MAAMZ,GACZC,EAAQ,CACJR,MAAM,GACNC,QAAQ,KAEZiB,EAAME,mBAQE,UCIDC,MA/Bf,WAAgB,IAAD,EAEef,mBAAS,IAFxB,mBAEJgB,EAFI,KAEGC,EAFH,KAWX,SAASC,EAAWpB,GAChBmB,GAAS,SAAAT,GACL,OAAOA,EAAUW,QAAO,SAACC,EAASC,GAC9B,OAAOA,IAAQvB,QAK3B,OACI,yBAAKL,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYoB,MAlBpB,SAAiBS,GAEbL,GAAS,SAAAT,GACL,MAAM,GAAN,mBAAWA,GAAX,CAAsBc,UAgBrBN,EAAMO,KAAI,SAACH,EAAUC,GAClB,OAAO,kBAAC,EAAD,CAAMvB,GAAIuB,EAAOG,IAAKH,EAAO3B,MAAO0B,EAAS1B,MAAOC,QAASyB,EAASzB,QAASE,SAAUqB,OAEpG,kBAAC,EAAD,QCrBQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e9c89e92.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <header>\n            <h1>Keeper</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n\n    const currentYear = new Date().getFullYear();\n\n    return (\n        <footer>\n            <p>\n                Copyright {currentYear}\n            </p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from \"react\";\n\nfunction Note(props) {\n\n    function handleClick() {\n        props.onDelete(props.id);\n    }\n\n    return(\n        <div className=\"note\">\n            <h1>{props.title}</h1>\n            <p>{props.content}</p>\n            <button onClick={handleClick}>DELETE</button>\n        </div>\n    )\n}\n\nexport default Note;","import React, {useState} from \"react\";\n\nfunction CreateArea(props) {\n\n    const [note,setNote] = useState({\n        title:'',\n        content:''\n    });\n\n    function handleChange(e) {\n        const {name,value} = e.target;\n\n        setNote(prevState => {\n            return {\n                ...prevState,\n                [name] : value\n            }\n        })\n    }\n\n    function submitNote(event) {\n        props.onAdd(note);\n        setNote({\n            title:'',\n            content:''\n        });\n        event.preventDefault();\n    }\n\n    return (\n        <div>\n            <form>\n                <input name=\"title\" placeholder=\"Title\" value={note.title} onChange={handleChange}/>\n                <textarea name=\"content\" placeholder=\"Take a note...\" rows=\"3\" value={note.content} onChange={handleChange}/>\n                <button onClick={submitNote}>Add</button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateArea;","import React, {useState} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Note from \"./components/Note\";\nimport CreateArea from \"./components/CreateArea\";\n\nfunction App() {\n\n    const [notes, setNotes] = useState([]);\n\n    function addNote(newNote) {\n        // console.log(note);\n        setNotes(prevState => {\n            return [...prevState, newNote];\n        })\n    }\n\n    function deleteNote(id) {\n        setNotes(prevState => {\n            return prevState.filter((noteItem,index)=>{\n                return index!==id;\n            });\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <Header/>\n            <CreateArea onAdd={addNote}/>\n            {notes.map((noteItem, index) => {\n                return <Note id={index} key={index} title={noteItem.title} content={noteItem.content} onDelete={deleteNote}/>\n            })}\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}